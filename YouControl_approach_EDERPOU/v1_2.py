from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
import time
import pickle
from bs4 import BeautifulSoup
import re
import pandas as pd
from pathlib import Path
from datetime import datetime


# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
INPUT_CSV = r"C:\OTP Draft\YouControl\test_dataset.csv"  # –§–∞–π–ª –∑ –Ñ–î–†–ü–û–£ (–∫–æ–ª–æ–Ω–∫–∞ "edrpou")
OUTPUT_DIR = "parsed_companies"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
COOKIES_FILE = "cookies.pkl"
DELAY_BETWEEN_REQUESTS = 3  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏)


# --- 1. –§—É–Ω–∫—Ü—ñ—ó –ø–∞—Ä—Å–∏–Ω–≥—É (–±–µ–∑ –∑–º—ñ–Ω) ---

def parse_activities_block(td_tag):
    """–ü–∞—Ä—Å–∏—Ç—å –±–ª–æ–∫ –≤–∏–¥—ñ–≤ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ."""
    data = {}
    main_block = td_tag.select_one("div.localized-item.flex-activity")
    if main_block:
        div_copy = BeautifulSoup(str(main_block), "lxml")
        for t in div_copy.select("div.activity-tooltip-p, a"):
            t.decompose()
        text = div_copy.get_text(" ", strip=True)
        match = re.match(r"(\d{2}\.\d{2})\s+(.+)", text)
        if match:
            kved, desc = match.groups()
            data["–ö–í–ï–î (–û—Å–Ω–æ–≤–Ω–∏–π)"] = f"{kved} ‚Äî {desc.strip()}"
    other_blocks = td_tag.select("li.localized-item.localized-other")[:3]
    for idx, li in enumerate(other_blocks, start=1):
        li_copy = BeautifulSoup(str(li), "lxml")
        for t in li_copy.select("div.activity-tooltip-p, a"):
            t.decompose()
        text = li_copy.get_text(" ", strip=True)
        match = re.match(r"(\d{2}\.\d{2})\s+(.+)", text)
        if match:
            kved, desc = match.groups()
            data[f"–ö–í–ï–î_{idx} (–Ü–Ω—à—ñ)"] = f"{kved} ‚Äî {desc.strip()}"
    return data


def parse_founders_block(td_tag):
    """–ó–±–∏—Ä–∞—î –ø–æ–≤–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –±–ª–æ–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—ñ–≤."""
    data = {}
    founder_cards = td_tag.select("div.info-additional-file#founder-card-list-block")
    for idx, card in enumerate(founder_cards[:5], start=1):
        card_copy = BeautifulSoup(str(card), "lxml")
        for t in card_copy.select(".copy-done, .content-for-copy, .check-individuals-link-search"):
            t.decompose()
        text = card_copy.get_text(" ", strip=True)
        text = re.sub(r"\s+", " ", text).strip()
        data[f"Cofounder_{idx}"] = text
    return data


def parse_company_youcontrol(html: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ–º–ø–∞–Ω—ñ—ó –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–Ω–∏–∫."""
    soup = BeautifulSoup(html, "lxml")
    result = {}

    for table in soup.select("table.detail-view"):
        for tr in table.select("tr"):
            th, td = tr.find("th"), tr.find("td")
            if not th or not td:
                continue
            key = th.get_text(separator=" ", strip=True)
            key = re.sub(r"\s*\(–ê–∫—Ç—É–∞–ª—å–Ω–æ.+?\)\s*", "", key).strip()
            td_copy = BeautifulSoup(str(td), "lxml")
            for bad in td_copy.select(".copy-done, .content-for-copy"):
                bad.decompose()

            if key.lower().startswith("–≤–∏–¥–∏ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ"):
                result.update(parse_activities_block(td_copy))
            elif key.lower().startswith("–ø–µ—Ä–µ–ª—ñ–∫ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—ñ–≤"):
                result.update(parse_founders_block(td_copy))
            else:
                value = td_copy.get_text(" ", strip=True)
                value = re.sub(r"\s+", " ", value).strip()
                result[key] = value

    edrpou_match = soup.find("h2", class_="seo-table-name case-icon short")
    if edrpou_match:
        edrpou = re.search(r"\d+", edrpou_match.get_text())
        if edrpou:
            result["EDRPOU_CODE"] = edrpou.group()

    return result


# --- 2. –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ---

def authorize_and_save_cookies(driver, login: str, password: str):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è cookies."""
    driver.get("https://youcontrol.com.ua/sign_in/")
    time.sleep(5)
    
    driver.find_element(By.NAME, "LoginForm[login]").send_keys(login)
    driver.find_element(By.NAME, "LoginForm[password]").send_keys(password)
    driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
    time.sleep(5)
    
    cookies = driver.get_cookies()
    with open(COOKIES_FILE, "wb") as f:
        pickle.dump(cookies, f)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —ñ cookies –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")


def load_cookies(driver):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö cookies."""
    if Path(COOKIES_FILE).exists():
        with open(COOKIES_FILE, "rb") as f:
            cookies = pickle.load(f)
        driver.get("https://youcontrol.com.ua/")
        for cookie in cookies:
            driver.add_cookie(cookie)
        driver.refresh()
        time.sleep(2)
        print("‚úÖ Cookies –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        return True
    return False


# --- 3. –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–æ–º–ø–∞–Ω—ñ—ó ---

def search_and_parse_company(driver, edrpou: str) -> dict:
    """–®—É–∫–∞—î –∫–æ–º–ø–∞–Ω—ñ—é –∑–∞ –Ñ–î–†–ü–û–£ —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω—ñ."""
    try:
        # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É –¥–ª—è –ø–æ—à—É–∫—É
        driver.get("https://youcontrol.com.ua/")
        time.sleep(2)
        
        # –ü–æ—à—É–∫ –∫–æ–º–ø–∞–Ω—ñ—ó
        search_box = driver.find_element(By.CSS_SELECTOR, "input[placeholder*='–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó, –Ñ–î–†–ü–û–£']")
        search_box.clear()
        search_box.send_keys(str(edrpou))
        search_box.send_keys(Keys.ENTER)
        time.sleep(5)
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è HTML
        html = driver.page_source
        company_data = parse_company_youcontrol(html)
        company_data["EDRPOU_INPUT"] = edrpou
        company_data["parse_timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return company_data
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É {edrpou}: {str(e)}")
        return {
            "EDRPOU_INPUT": edrpou,
            "ERROR": str(e),
            "parse_timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }


# --- 4. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–ø–∏—Å–∫—É –Ñ–î–†–ü–û–£."""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    Path(OUTPUT_DIR).mkdir(exist_ok=True)
    
    # –ß–∏—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ñ–î–†–ü–û–£
    try:
        df_input = pd.read_csv(INPUT_CSV)
        if "EDRPOU" not in df_input.columns:
            print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'EDRPOU' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ {INPUT_CSV}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(df_input.columns)}")
            return
        
        edrpou_list = df_input["EDRPOU"].dropna().astype(str).tolist()
        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(edrpou_list)} –Ñ–î–†–ü–û–£ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
    
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {INPUT_CSV} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–°—Ç–≤–æ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª –∑ –∫–æ–ª–æ–Ω–∫–æ—é 'edrpou' —Ç–∞ —Å–ø–∏—Å–∫–æ–º –∫–æ–¥—ñ–≤ –Ñ–î–†–ü–û–£")
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
    options = Options()
    options.add_argument("--start-maximized")
    # options.add_argument("--headless")  # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
    
    driver = webdriver.Chrome(options=options)
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è cookies
        if not load_cookies(driver):
            print("‚ö†Ô∏è Cookies –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è...")
            authorize_and_save_cookies(
                driver,
                login="nelkovvasilij@gmail.com",
                password="gEr32weIG&*"
            )
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –Ñ–î–†–ü–û–£
        all_results = []
        
        for idx, edrpou in enumerate(edrpou_list, start=1):
            print(f"\n[{idx}/{len(edrpou_list)}] –û–±—Ä–æ–±–∫–∞ –Ñ–î–†–ü–û–£: {edrpou}")
            
            company_data = search_and_parse_company(driver, edrpou)
            all_results.append(company_data)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            df_temp = pd.DataFrame(all_results)
            temp_file = Path(OUTPUT_DIR) / "temp_results.csv"
            df_temp.to_csv(temp_file, index=False, encoding="utf-8-sig")
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if idx < len(edrpou_list):
                time.sleep(DELAY_BETWEEN_REQUESTS)
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = Path(OUTPUT_DIR) / f"companies_parsed_{timestamp}.csv"
        df_final = pd.DataFrame(all_results)
        df_final.to_csv(output_file, index=False, encoding="utf-8-sig")
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_file}")
        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ –∫–æ–º–ø–∞–Ω—ñ–π: {len(all_results)}")
        
    finally:
        driver.quit()


# --- 5. –ó–∞–ø—É—Å–∫ ---

if __name__ == "__main__":
    main()